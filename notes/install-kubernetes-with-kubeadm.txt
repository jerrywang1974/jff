Install Kubernetes 1.5.2 with kubeadm on Ubuntu 16.04

http://kubernetes.io/docs/getting-started-guides/kubeadm/

AWS VPC 注意事项:

*   使用 community AMI: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20170202
    (ami-a0e136cd)，创建 EC2 instance，在每个 EC2 instance 的 security group
    里允许 source 为 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16
    网段的 All Traffic，否则 k8s 跨节点之间不能联通。

*   注意创建子网时把 auto assign public IP 选中，否则 VPC 里机器不能连接
    Internet(可以分配 Elastic IP，但只有 5 个免费 EIP)。 同时在创建第二个以及
    以后的子网时，需要额外配置这个子网的路由表，把 0.0.0.0/0 到因特网网关的路
    由加上（默认没加），否则第一个子网之外的子网也不能连接 Internet。

*   关掉每个 EC2 instance 的 source/dest check，否则同一个 VPC subnet 里不能使
    用 Calico BGP 方式，也不能使用 flannel aws-vpc (flannel 会分配自己的网段)。

*   关闭 rp\_filter，否则跨机器不同网段的通讯会失败

*   同一个 VPC 里的不同 subnet 要使用同一个路由表（在VPC 路由表设置界面显式关
    联到所有子网)，否则 flannel aws-vpc 下不同子网里的 flannel 更新各自路由表
    ，导致子网间的 flannel 网段不通。

Flannel aws-vpc 使用参考:
* https://github.com/coreos/flannel/blob/master/Documentation/aws-vpc-backend.md
* https://github.com/coreos/flannel#backends

对 https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
需要如下补丁，否则 flannel 在调用 AWS web api 时会因为无法验证 TLS 证书而失败:
```
$ diff -u kube-flannel.yml.orig kube-flannel.yml
--- kube-flannel.yml.orig	2017-02-19 23:25:33.000000000 +0800
+++ kube-flannel.yml	2017-02-19 23:28:52.000000000 +0800
@@ -24,7 +24,7 @@
     {
       "Network": "10.244.0.0/16",
       "Backend": {
-        "Type": "vxlan"
+        "Type": "aws-vpc"
       }
     }
 ---
@@ -64,6 +64,9 @@
         volumeMounts:
         - name: run
           mountPath: /run
+        - name: sslcerts
+          mountPath: /etc/ssl/certs
+          readOnly: true
         - name: flannel-cfg
           mountPath: /etc/kube-flannel/
       - name: install-cni
@@ -78,6 +81,9 @@
         - name: run
           hostPath:
             path: /run
+        - name: sslcerts
+          hostPath:
+            path: /etc/ssl/certs
         - name: cni
           hostPath:
             path: /etc/cni/net.d
$ kubectl apply -f ./kube-flannel.yml
```


```sh
# both node01/node02, or the packets from Calico subnets will be dropped
# https://nrocco.github.io/2013/04/13/disable-rp-filter.html
# http://www.tldp.org/HOWTO/Adv-Routing-HOWTO/lartc.kernel.rpf.html
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do echo 0 > $f; done

# both node01/node02, f**k GFW,  use "sudo tcpdump -vvv -s 0 -l -n port 53" to find out banned domain names
echo "172.19.40.3     packages.cloud.google.com gcr.io quay-registry.s3.amazonaws.com. quay.io storage.googleapis.com" >> /etc/hosts

# both node01/node02, accelerate docker pull
#... add {"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"], "storage-driver": "overlay2" } to /etc/docker/daemon.json, then kill -s HUP `pidof dockerd`

# both node01/node02
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
# Install docker if you don't have it already.
apt-get install -y docker.io
apt-get install -y kubelet kubeadm kubectl kubernetes-cni


# node01
kubeadm init    # 如果使用 flannel: kubeadm init --pod-network-cidr 10.244.0.0/16
kubectl taint nodes --all dedicated-

## v2.0 有 bug: https://github.com/projectcalico/k8s-policy/commit/0bb96287de8877c2882c4a38350f13a5e56fab26
##kubectl apply -f http://docs.projectcalico.org/v2.0/getting-started/kubernetes/installation/hosted/kubeadm/calico.yaml

## http://docs.projectcalico.org/master/getting-started/kubernetes/installation/hosted/kubeadm/
kubectl apply -f http://docs.projectcalico.org/master/getting-started/kubernetes/installation/hosted/kubeadm/calico.yaml

kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml


# node02
kubeadm join --token=ede318.d293b35f94a866c7 192.168.31.100


# node01
## https://www.weave.works/documentation/scope-latest-installing/#k8s
kubectl apply -f https://cloud.weave.works/launch/k8s/weavescope.yaml

## http://kubernetes.io/docs/getting-started-guides/kubeadm/#optional-installing-a-sample-application
kubectl create namespace sock-shop
kubectl apply -n sock-shop -f 'https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true'

## https://github.com/kubernetes/heapster/blob/master/docs/influxdb.md
git clone git@github.com:kubernetes/heapster.git
cd heapster && kubectl create -f deploy/kube-config/influxdb/
```

# vi: ft=markdown
